{"version":3,"file":"index.js","sources":["../src/main.js","../src/js/11-module.js"],"sourcesContent":["import axios from \"axios\";\n\n\n// 12.1\n// const url = 'https://jsonplaceholder.typicode.com/todos';\n\n// 1) обробка помилки безпосередньо в тілі асинхронної функції \n// async function foo() {\n\n// await чекає поки метод вик і перетворює (розпарсює)\n// і зберіг результат у змінну result\n  \n\n// try {\n//   const result = await axios(url);\n\n//   document.body.insertAdjacentHTML(\"beforeend\", JSON.stringify(result.data));\n\n// } catch(error) {\n\n//     console.log(error)\n// }\n// console.log(\"lalala\");\n// }\n\n// foo()\n\n// 2) або якщо ми щось повертаємо з асинхронної функції \n\n// foo()\n// .then(data => console.log(\"then\", data))\n// .catch(error => console.log(error.message));\n\n// 3) якщо хочем обробити результат одеієї асинхронної функції в тілі іншої \n\n// async function foo() {\n//   const response = await axios(url);\n//   return response.data;\n\n// }\n\n\n//  async function result() {\n//  try {\n// const data = await foo();\n// console.log(data);\n\n//  } catch(error) {\n//     console.log(error.message)\n//  }\n// }\n\n// result();\n\n\n// 2- як ми робим запити на 3 різні ендпойнти або url \n\n// const url = 'https://jsonplaceholder.typicode.com/todos';\n\n// async function getTodos() {\n//     const todo1 = await axios(`${url}/1`);\n//     const todo2 = await axios(`${url}/2`);\n//     const todo3 = await axios(`${url}/3`);\n\n//     return [todo1.data, todo2.data, todo3.data];\n// }\n//  \n// getTodos()\n// .then(data => console.log(data))\n// .catch(error => {\n//     console.log(error)\n// });\n\n// інший спосіб\n\n// async function getTodos() {\n//     const todosArr = [1, 2, 3];\n\n//     const todos = todosArr.map( async (item) => {\n\n//         const res = await axios(`${url}/${item}`);\n//         return res.data;\n//     })\n\n//     const result = await Promise.all(todos);\n//     return result;\n// }\n\n// getTodos()\n// .then(data => {\n//     console.log(data);\n// })\n// .catch(error => {\n//     console.log(error);\n// })\n\n\n\n// *************\n//cпосіб, якщо обробляємо в функції \n\n\n// async function getTodos() {\n//     const todosArr = [1, 2, 3];\n\n//     try {\n//         const todos = todosArr.map( async (item) => {\n//             const res = await axios(`${url}/${item}`);\n//             return res.data;\n//         })\n\n//         const result = await Promise.all(todos);\n//         console.log(result);\n\n//     } catch(error) {\n//      console.log(error.message)\n     \n//     }\n// }\n\n// getTodos()\n\n\n// 3 - вправа \n// використовуєм https://pokeapi.co/ та створимо сторінку перегляду \n\n/**\n * Використовуємо https://pokeapi.co/ та створимо сторінку перегляду покемонів\n *\n */\n\nconst BASE_URL = 'https://pokeapi.co/api/v2/pokemon/';\n\n// 1) \nconst container = document.querySelector(\".card-container\");\nconst form = document.querySelector(\".search-form\");\n\nform.addEventListener(\"submit\", onSearch);\n\n// 2) функція яка робитиме запит на сервер\nasync function fetchData(pokemonName) {\n    const result = await axios(`${BASE_URL}${pokemonName}`);\n    return result.data;\n}\n\nasync function onSearch(event) {\n    event.preventDefault();\n    const searchQuery = event.target.elements.query.value.trim();\n    \n    try {\n        const data = await fetchData(searchQuery);\n        console.log(data);\n        \n        container.innerHTML = renderPokemon(data);\n    } catch(error) {\n        onFetchError(error.message);\n    }\n}\n\n\nfunction renderPokemon({ name, weight, height, abilities, sprites }) {\n\n    const abilitiesList = abilities.map(({ ability }) => `\n        <li class=\"list-group-item\">${ability.name}</li>\n    `).join(\"\");\n\n    return `\n        <div class=\"card\">\n            <div class=\"card-img-top\">\n                <img src=\"${sprites.front_default}\" alt=\"${name}\"/>\n            </div>\n            <div class=\"card-body\">\n                <h3 class=\"card-title\">Ім'я: ${name}</h3>\n                <p class=\"card-text\">Вага: ${weight}</p>\n                <p class=\"card-text\">Зріст: ${height}</p>\n            </div>\n\n            <p class=\"card-text\">\n                <h4>Вмінян:</h4>\n                <ul>\n                    ${abilitiesList}\n                </ul>\n            </p>\n        </div>\n    `\n}\n\nfunction onFetchError(message) {\n    alert(message)\n}\n","// 1 - додаєм та використовуєм бібліотеку https://axios-http.com/\n// Робимо рефакторинг\n// - імпорт \n// - запит\n// - метод axios.get \n// - обробка відповіді та помилки \n\nimport axios from \"axios\";\n\n// const url = \"https://jsonplaceholder.typicode.com/todos\";\n\n// const list = document.querySelector(\".todo-list\");\n\n// a) звичайний спобіб з фетч \n\n// fetch(url) \n// .then(res => {\n//     if(!res.ok) {\n//         throw new Error(\"Oops\");\n//     }\n//     return res.json;\n// })\n// .then(data => {\n//     console.log(data);\n//     list.insertAdjacentHTML(\"beforeend\", createMarkup(data));\n// })\n// .catch(error => {\n//     console.log(error);\n// })\n\n// function createMarkup(arr) {\n//     arr.map(({ title, completed}) => `\n//     <li class=\"list-item\">\n//     <input type=\"checkbox\" ${completed && \"checked\"}/>\n//     <p>${title}</p>\n//     </li>\n//     `).join(\"\");\n// }\n\n// b) cпосіб з аксіос \n\n// axios(\"https://jsonplaceholder.typicode.com/todos1\")\n// .then((res) => {\n//     console.log(res.data);\n//     list.insertAdjacentHTML(\"beforeend\", createMarkup(res.data));\n// })\n// .catch(error => {\n//     console.log(error.message);\n// })\n\n// c) спосіб з аксіос і явним викликом \n\n// axios.get(\"https://jsonplaceholder.typicode.com/todos1\")\n//  .then((res) => {\n//         console.log(res.data);\n//         list.insertAdjacentHTML(\"beforeend\", createMarkup(res.data));\n//     })\n//     .catch(error => {\n//         console.log(error.message);\n//     })\n\n// 2 - всередині функції запит, зовні обробка \n// (як ми можемо викор аксіос в функцяя для подальшого перевикористання)\n\n\n// const fetchData = (endpoint = \"todos\") => {\n// return axios(`https://jsonplaceholder.typicode.com/${endpoint}`);\n\n\n// }\n\n// fetchData(\"todos\")\n// .then(res => {\n//     console.log(res);\n// })\n// .catch(error => {\n//     console.log(error.message);\n// })\n// fetchData(\"users\")\n// .then(res => {\n//     console.log(res.data);\n// })\n// .catch(error => {\n//     console.log(error);\n// })\n\n// 2 -  робимо рефакторинг авторизації запитів з ключами \n// - як у axios передавати search params та headers \n\n// Для прикладу використовуємо https://pixabay.com/api/docs/ \n\nconst API_KEY = \"51359701-f6006c27d1fc3647654901390\";\n// const params = new URLSearchParams({\n// key: API_KEY,\n// q: \"cat\"\n// })\nconst list = document.querySelector(\".list\");\n\naxios('https://pixabay.com/api/', {\nparams: {\nkey: API_KEY,\nq: \"cat\"\n}\n})\n.then(res => {\n    console.log(res);\n    list.insertAdjacentHTML(\"beforeend\", createMarkup(res.data.hits));\n})\n.catch(error => {\n    console.log(error);\n})\n\nfunction createMarkup(arr) {\n    arr.map(({previewURL, tags}) => `\n    <li>\n    <img src=\"${previewURL}\" alt=\"${tags}\" width=\"300\" />\n    </li>\n\n    `).join(\"\");\n}"],"names":["BASE_URL","container","form","onSearch","fetchData","pokemonName","axios","event","searchQuery","data","renderPokemon","error","onFetchError","name","weight","height","abilities","sprites","abilitiesList","ability","message","API_KEY","list","res","createMarkup","arr","previewURL","tags"],"mappings":"wIAmIA,MAAMA,EAAW,qCAGXC,EAAY,SAAS,cAAc,iBAAiB,EACpDC,EAAO,SAAS,cAAc,cAAc,EAElDA,EAAK,iBAAiB,SAAUC,CAAQ,EAGxC,eAAeC,EAAUC,EAAa,CAElC,OADe,MAAMC,EAAM,GAAGN,CAAQ,GAAGK,CAAW,EAAE,GACxC,IAClB,CAEA,eAAeF,EAASI,EAAO,CAC3BA,EAAM,eAAc,EACpB,MAAMC,EAAcD,EAAM,OAAO,SAAS,MAAM,MAAM,OAEtD,GAAI,CACA,MAAME,EAAO,MAAML,EAAUI,CAAW,EACxC,QAAQ,IAAIC,CAAI,EAEhBR,EAAU,UAAYS,EAAcD,CAAI,CAC3C,OAAOE,EAAO,CACXC,EAAaD,EAAM,OAAO,CAC7B,CACL,CAGA,SAASD,EAAc,CAAE,KAAAG,EAAM,OAAAC,EAAQ,OAAAC,EAAQ,UAAAC,EAAW,QAAAC,GAAW,CAEjE,MAAMC,EAAgBF,EAAU,IAAI,CAAC,CAAE,QAAAG,CAAS,IAAK;AAAA,sCACnBA,EAAQ,IAAI;AAAA,KAC7C,EAAE,KAAK,EAAE,EAEV,MAAO;AAAA;AAAA;AAAA,4BAGiBF,EAAQ,aAAa,UAAUJ,CAAI;AAAA;AAAA;AAAA,+CAGhBA,CAAI;AAAA,6CACNC,CAAM;AAAA,8CACLC,CAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAM9BG,CAAa;AAAA;AAAA;AAAA;AAAA,KAKnC,CAEA,SAASN,EAAaQ,EAAS,CAC3B,MAAMA,CAAO,CACjB,CClGA,MAAMC,EAAU,qCAKVC,EAAO,SAAS,cAAc,OAAO,EAE3ChB,EAAM,2BAA4B,CAClC,OAAQ,CACR,IAAKe,EACL,EAAG,KACH,CACA,CAAC,EACA,KAAKE,GAAO,CACT,QAAQ,IAAIA,CAAG,EACfD,EAAK,mBAAmB,YAAaE,EAAaD,EAAI,KAAK,IAAI,CAAC,CACpE,CAAC,EACA,MAAMZ,GAAS,CACZ,QAAQ,IAAIA,CAAK,CACrB,CAAC,EAED,SAASa,EAAaC,EAAK,CACvBA,EAAI,IAAI,CAAC,CAAC,WAAAC,EAAY,KAAAC,CAAI,IAAM;AAAA;AAAA,gBAEpBD,CAAU,UAAUC,CAAI;AAAA;AAAA;AAAA,KAGnC,EAAE,KAAK,EAAE,CACd"}